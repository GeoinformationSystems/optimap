# Generated by Django 5.1.9 on 2025-10-27 18:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import django_currentuser.db.models.fields
import django_currentuser.middleware
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="GlobalRegion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "region_type",
                    models.CharField(
                        choices=[("C", "Continent"), ("O", "Ocean")], max_length=1
                    ),
                ),
                ("source_url", models.URLField()),
                ("license", models.CharField(max_length=200)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326),
                ),
                ("last_loaded", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url_field", models.URLField(max_length=999)),
                ("harvest_interval_minutes", models.IntegerField(default=4320)),
                ("last_harvest", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "collection_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("tags", models.CharField(blank=True, max_length=1024, null=True)),
                ("is_preprint", models.BooleanField(default=False)),
                ("name", models.CharField(max_length=255)),
                ("issn_l", models.CharField(blank=True, max_length=9, null=True)),
                ("openalex_id", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "openalex_url",
                    models.URLField(blank=True, max_length=512, null=True),
                ),
                (
                    "publisher_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("works_count", models.IntegerField(blank=True, null=True)),
                (
                    "homepage_url",
                    models.URLField(blank=True, max_length=512, null=True),
                ),
                (
                    "abbreviated_title",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("is_oa", models.BooleanField(default=False)),
                ("cited_by_count", models.IntegerField(blank=True, null=True)),
                (
                    "default_work_type",
                    models.CharField(
                        choices=[
                            ("article", "Article"),
                            ("book", "Book"),
                            ("book-chapter", "Book Chapter"),
                            ("book-part", "Book Part"),
                            ("book-section", "Book Section"),
                            ("book-series", "Book Series"),
                            ("book-set", "Book Set"),
                            ("book-track", "Book Track"),
                            ("component", "Component"),
                            ("database", "Database"),
                            ("dataset", "Dataset"),
                            ("dissertation", "Dissertation"),
                            ("edited-book", "Edited Book"),
                            ("editorial", "Editorial"),
                            ("erratum", "Erratum"),
                            ("grant", "Grant"),
                            ("journal", "Journal"),
                            ("journal-article", "Journal Article"),
                            ("journal-issue", "Journal Issue"),
                            ("journal-volume", "Journal Volume"),
                            ("letter", "Letter"),
                            ("libguides", "Library Guides"),
                            ("monograph", "Monograph"),
                            ("other", "Other"),
                            ("paratext", "Paratext"),
                            ("peer-review", "Peer Review"),
                            ("posted-content", "Posted Content"),
                            ("preprint", "Preprint"),
                            ("proceedings", "Proceedings"),
                            ("proceedings-article", "Proceedings Article"),
                            ("proceedings-series", "Proceedings Series"),
                            ("reference-book", "Reference Book"),
                            ("reference-entry", "Reference Entry"),
                            ("report", "Report"),
                            ("report-component", "Report Component"),
                            ("report-series", "Report Series"),
                            ("review", "Review"),
                            ("standard", "Standard"),
                            ("supplementary-materials", "Supplementary Materials"),
                        ],
                        default="article",
                        help_text="Default work type assigned to works harvested from this source (can be overridden by OpenAlex metadata)",
                        max_length=50,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True, related_name="works_users", to="auth.group"
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="works_users_permissions",
                        to="auth.permission",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="BlockedDomain",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("domain", models.CharField(max_length=255, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "blocked_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blocked_domains",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BlockedEmail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "blocked_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blocked_emails",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EmailLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("recipient_email", models.EmailField(max_length=254)),
                ("subject", models.CharField(max_length=255)),
                ("sent_at", models.DateTimeField(auto_now_add=True)),
                ("email_content", models.TextField(blank=True, null=True)),
                (
                    "trigger_source",
                    models.CharField(
                        choices=[
                            ("admin", "Admin Panel"),
                            ("scheduled", "Scheduled Task"),
                            ("manual", "Manually Triggered"),
                        ],
                        default="manual",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("d", "Draft"),
                            ("p", "Published"),
                            ("t", "Testing"),
                            ("w", "Withdrawn"),
                            ("h", "Harvested"),
                            ("c", "Contributed"),
                        ],
                        default="success",
                        max_length=10,
                    ),
                ),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "sent_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HarvestingEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=16,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="harvesting_events",
                        to="works.source",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(default="default_subscription", max_length=4096),
                ),
                (
                    "search_term",
                    models.CharField(blank=True, max_length=4096, null=True),
                ),
                ("timeperiod_startdate", models.DateField(blank=True, null=True)),
                ("timeperiod_enddate", models.DateField(blank=True, null=True)),
                (
                    "region",
                    django.contrib.gis.db.models.fields.GeometryCollectionField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("subscribed", models.BooleanField(default=True)),
                (
                    "regions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Predefined geographic regions (continents and oceans)",
                        related_name="subscriptions",
                        to="works.globalregion",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "subscription",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notify_new_manuscripts", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Work",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("d", "Draft"),
                            ("p", "Published"),
                            ("t", "Testing"),
                            ("w", "Withdrawn"),
                            ("h", "Harvested"),
                            ("c", "Contributed"),
                        ],
                        default="d",
                        max_length=1,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("article", "Article"),
                            ("book", "Book"),
                            ("book-chapter", "Book Chapter"),
                            ("book-part", "Book Part"),
                            ("book-section", "Book Section"),
                            ("book-series", "Book Series"),
                            ("book-set", "Book Set"),
                            ("book-track", "Book Track"),
                            ("component", "Component"),
                            ("database", "Database"),
                            ("dataset", "Dataset"),
                            ("dissertation", "Dissertation"),
                            ("edited-book", "Edited Book"),
                            ("editorial", "Editorial"),
                            ("erratum", "Erratum"),
                            ("grant", "Grant"),
                            ("journal", "Journal"),
                            ("journal-article", "Journal Article"),
                            ("journal-issue", "Journal Issue"),
                            ("journal-volume", "Journal Volume"),
                            ("letter", "Letter"),
                            ("libguides", "Library Guides"),
                            ("monograph", "Monograph"),
                            ("other", "Other"),
                            ("paratext", "Paratext"),
                            ("peer-review", "Peer Review"),
                            ("posted-content", "Posted Content"),
                            ("preprint", "Preprint"),
                            ("proceedings", "Proceedings"),
                            ("proceedings-article", "Proceedings Article"),
                            ("proceedings-series", "Proceedings Series"),
                            ("reference-book", "Reference Book"),
                            ("reference-entry", "Reference Entry"),
                            ("report", "Report"),
                            ("report-component", "Report Component"),
                            ("report-series", "Report Series"),
                            ("review", "Review"),
                            ("standard", "Standard"),
                            ("supplementary-materials", "Supplementary Materials"),
                        ],
                        db_index=True,
                        default="article",
                        help_text="Work type following Crossref/OpenAlex vocabulary. Set from source or OpenAlex metadata.",
                        max_length=50,
                    ),
                ),
                ("creationDate", models.DateTimeField(auto_now_add=True)),
                ("lastUpdate", models.DateTimeField(auto_now=True)),
                (
                    "doi",
                    models.CharField(
                        blank=True, max_length=1024, null=True, unique=True
                    ),
                ),
                ("provenance", models.TextField(blank=True, null=True)),
                ("publicationDate", models.DateField(blank=True, null=True)),
                ("abstract", models.TextField(blank=True, null=True)),
                (
                    "url",
                    models.URLField(
                        blank=True, max_length=1024, null=True, unique=True
                    ),
                ),
                (
                    "geometry",
                    django.contrib.gis.db.models.fields.GeometryCollectionField(
                        blank=True,
                        null=True,
                        srid=4326,
                        verbose_name="Work geometry/ies",
                    ),
                ),
                (
                    "timeperiod_startdate",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=1024, null=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "timeperiod_enddate",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=1024, null=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "authors",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        help_text="Author names (from original source or OpenAlex)",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "keywords",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        help_text="Keywords/subjects (from original source or OpenAlex)",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "topics",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        help_text="Research topics (typically from OpenAlex)",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "openalex_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                (
                    "openalex_match_info",
                    models.JSONField(
                        blank=True,
                        help_text="Information about partial matches found",
                        null=True,
                    ),
                ),
                (
                    "openalex_fulltext_origin",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("openalex_is_retracted", models.BooleanField(default=False)),
                (
                    "openalex_ids",
                    models.JSONField(
                        blank=True,
                        help_text="OpenAlex IDs object (doi, pmid, etc)",
                        null=True,
                    ),
                ),
                (
                    "openalex_open_access_status",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "created_by",
                    django_currentuser.db.models.fields.CurrentUserField(
                        default=django_currentuser.middleware.get_current_authenticated_user,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_creator",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="works",
                        to="works.harvestingevent",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="works",
                        to="works.source",
                    ),
                ),
                (
                    "updated_by",
                    django_currentuser.db.models.fields.CurrentUserField(
                        default=django_currentuser.middleware.get_current_authenticated_user,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        on_update=True,
                        related_name="%(app_label)s_%(class)s_updater",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated by",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="WikidataExportLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("export_date", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("created", "Created"),
                            ("updated", "Updated"),
                            ("skipped", "Skipped"),
                            ("error", "Error"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                (
                    "wikidata_qid",
                    models.CharField(
                        blank=True,
                        help_text="Wikidata Q-ID (e.g., Q12345)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "wikidata_url",
                    models.URLField(
                        blank=True,
                        help_text="Full URL to Wikidata item",
                        max_length=512,
                        null=True,
                    ),
                ),
                (
                    "exported_fields",
                    models.JSONField(
                        blank=True,
                        help_text="List of fields that were exported",
                        null=True,
                    ),
                ),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "export_summary",
                    models.TextField(
                        blank=True, help_text="Summary of what was exported", null=True
                    ),
                ),
                (
                    "wikibase_endpoint",
                    models.URLField(
                        blank=True,
                        help_text="Wikibase API endpoint used for this export (e.g., https://www.wikidata.org/w/api.php)",
                        max_length=512,
                        null=True,
                    ),
                ),
                (
                    "work",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wikidata_exports",
                        to="works.work",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wikidata Export Log",
                "verbose_name_plural": "Wikidata Export Logs",
                "ordering": ["-export_date"],
            },
        ),
        migrations.AddConstraint(
            model_name="work",
            constraint=models.UniqueConstraint(
                fields=("doi", "url"), name="unique_work_entry"
            ),
        ),
        migrations.AddIndex(
            model_name="wikidataexportlog",
            index=models.Index(fields=["wikidata_qid"], name="works_wikidata_qid_idx"),
        ),
    ]
